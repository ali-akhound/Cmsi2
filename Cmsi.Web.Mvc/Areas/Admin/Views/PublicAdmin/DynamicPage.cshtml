@model AVA.Web.Mvc.Models.Admin.DynamicPageViewModel
@using AVA.UI.Helpers.Controller;
@using AVA.UI.Helpers.Common;
@using AVA.UI.Helpers.Base;
@{
    string ModuleName = "DynamicPage";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-10">
        <h2>{{ '@(ModuleName)' | translate }}</h2>
        <ol class="breadcrumb">
            <li>
                <a ui-sref="Home">{{ 'Home' | translate }}</a>
            </li>
            <li>
                <a ui-sref="DynamicPageManagement">{{ 'DynamicPageManagement' | translate }}</a>
            </li>
            <li class="active">
                <strong>{{ '@(ModuleName)' | translate }}</strong>
            </li>
        </ol>
    </div>
    <div class="col-lg-2">
    </div>
</div>
<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content text-center p-md">
                    <div class="form-horizontal">
                        <div class="row wrapper border-bottom white-bg page-heading">

                            @using (Html.BeginForm("SubmitDynamicPage", "PublicAdmin", null, FormMethod.Post, new { id = "form-" + ModuleName, ng_controller = "MySubmitController" }))
                            {
                                <input type="hidden" id="forgeryToken" value="@ControllerHelper.GetAntiForgeryToken()" />
                                @Html.HiddenFor(model => model.ID)
                                @Html.HiddenFor(model => model.ObjectState)
                                @Html.HiddenFor(model => model.Context, new { id = CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.Context).Name, ng_model = "model." + CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.Context).Name });
                                @Html.HiddenFor(model => model.EnglishContext, new { id = CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.EnglishContext).Name, ng_model = "model." + CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.EnglishContext).Name });
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    <div class="col-sm-2">
                                        @Html.LabelFor(model => model.Title, new { @class = "control-label" }):
                                    </div>
                                    <div class="col-sm-3">
                                        @Html.TextBoxFor(model => model.Title, new
                                   {
                                       @class = "form-control",
                                       ng_model = "model." + CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.Title).Name
                                   })
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-sm-2">
                                        @Html.LabelFor(model => model.Keyword, new { @class = "control-label" }):
                                    </div>
                                    <div class="col-sm-3">
                                        @Html.TextBoxFor(model => model.Keyword, new
                                   {
                                       @class = "form-control",
                                       ng_model = "model." + CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.Keyword).Name
                                   })
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.ValidationMessageFor(model => model.Keyword, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-sm-2">
                                        @Html.LabelFor(model => model.Description, new { @class = "control-label" }):
                                    </div>
                                    <div class="col-sm-3">
                                        @Html.TextBoxFor(model => model.Description, new
                                   {
                                       @class = "form-control",
                                       ng_model = "model." + CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.Description).Name
                                   })
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>



                            }
                            <div class="form-group">
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.Context, new { @class = "control-label" }):
                                </div>
                                @using (Html.BeginForm())
                                {
                                    @Html.Action("HtmlEditorPartial")
                                }
                            </div>
                            <div class="form-group">
                                <div class="col-sm-2">
                                    @Html.LabelFor(model => model.EnglishContext, new { @class = "control-label" }):
                                </div>
                                @using (Html.BeginForm())
                                {
                                    @Html.Action("EnglishContextHtmlEditorPartial")
                                }
                            </div>
                            <div class="hr-line-dashed"></div>
                            <div class="form-group">
                                <div class="col-sm-3 col-sm-offset-3">
                                    <button class="btn btn-primary" ng-controller="MySubmitController" id="SubmitBtn" ng-click="submitForm($event,'@Url.Action("SubmitDynamicPage", "PublicAdmin")','form-@ModuleName')">@(Model.ObjectState == ObjectState.Update ? "ویرایش" : " ثبت")</button>
                                    <a class="btn btn-white" ui-sref="DynamicPageManagement">بازگشت</a>
                                </div>
                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>


    </div>

</div>
<script>
    var CurrentModel=@Html.Raw(Json.Encode(Model));
    function OnHtmlChangedChanged(s, e) {
        CurrentModel.@(CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.Context).Name )=HtmlEditor.GetHtml();
        Context.value=HtmlEditor.GetHtml();
    }
    function OnInit(s, e) {
        Context.value=CurrentModel.@(CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.Context).Name );
        HtmlEditor.SetHtml(CurrentModel.@(CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.Context).Name ));
    }
    function OnEnglishContextHtmlChangedChanged(s, e) {
        CurrentModel.@(CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.EnglishContext).Name )=HtmlEditor.GetHtml();
        @(CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.EnglishContext).Name ).value=HtmlEditor.GetHtml();
    }
    function OnEnglishContextInit(s, e) {
        @(CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.EnglishContext).Name ).value=CurrentModel.@(CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.EnglishContext).Name );
        EnglishContextHtmlEditor.SetHtml(CurrentModel.@(CommonHelper.ExposeProperty.GetPropertyInfo(Model, m => m.EnglishContext).Name ));
    }
    //GetValue
</script>
